import torch
import argparse
import sys


def parse_args():
    """–ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å default –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    parser = argparse.ArgumentParser(
        description='–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –≥–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞—Ö',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    # Data paths
    parser.add_argument(
        '--root',
        type=str,
        default='./',
        help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏'
    )

    parser.add_argument(
        '--output-dir',
        type=str,
        default='results',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π'
    )

    # Model parameters
    parser.add_argument(
        '--hidden-channels',
        type=int,
        default=128,
        help='–†–∞–∑–º–µ—Ä —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏'
    )

    parser.add_argument(
        '--num-layers',
        type=int,
        default=2,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏'
    )

    parser.add_argument(
        '--embedding-dim',
        type=int,
        default=64,
        help='–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤–µ—Ä—à–∏–Ω'
    )

    parser.add_argument(
        '--dropout',
        type=float,
        default=0.2,
        help='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å dropout'
    )

    # Training parameters
    parser.add_argument(
        '--learning-rate',
        type=float,
        default=0.001,
        help='–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--weight-decay',
        type=float,
        default=1e-5,
        help='L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è'
    )

    parser.add_argument(
        '--epochs',
        type=int,
        default=100,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--batch-size',
        type=int,
        default=256,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞'
    )

    parser.add_argument(
        '--early-stopping',
        type=int,
        default=10,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–ª—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'
    )

    # Graph parameters
    parser.add_argument(
        '--num-duplicates',
        type=int,
        default=3,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã (k)'
    )

    parser.add_argument(
        '--train-ratio',
        type=float,
        default=0.8,
        help='–î–æ–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    )

    parser.add_argument(
        '--val-ratio',
        type=float,
        default=0.1,
        help='–î–æ–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    )

    parser.add_argument(
        '--test-ratio',
        type=float,
        default=0.1,
        help='–î–æ–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    )

    # Runtime parameters
    parser.add_argument(
        '--device',
        type=int,
        default=-1,
        help='–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (-1 is cpu)'
    )

    parser.add_argument(
        '--seed',
        type=int,
        default=42,
        help='Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏'
    )

    parser.add_argument(
        '--log-interval',
        type=int,
        default=10,
        help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —ç–ø–æ—Ö–∞—Ö)'
    )

    parser.add_argument(
        '--save-model',
        action='store_true',
        default=True,
        help='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å'
    )

    parser.add_argument(
        '--no-save-model',
        action='store_false',
        dest='save_model',
        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å'
    )

    parser.add_argument(
        '--visualize',
        action='store_true',
        default=False,
        help='–°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏'
    )

    # Experimental parameters
    parser.add_argument(
        '--model-type',
        type=str,
        default='HGT',
        choices=['HGT', 'GCN', 'GAT', 'GraphSAGE'],
        help='–¢–∏–ø –º–æ–¥–µ–ª–∏ –≥—Ä–∞—Ñ–æ–≤–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏'
    )

    parser.add_argument(
        '--negative-samples-ratio',
        type=float,
        default=1.0,
        help='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å—ç–º–ø–ª–æ–≤ –∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º'
    )

    parser.add_argument(
        '--model-name',
        type=str,
        default='roberta-base-nli-stsb-mean-tokens',
        help='Name of bert model'
    )

    args = parser.parse_args()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    args.device = torch.device('cuda' if torch.cuda.is_available() and args.device != -1 else 'cpu')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    total_ratio = args.train_ratio + args.val_ratio + args.test_ratio
    if abs(total_ratio - 1.0) > 1e-6:
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å—É–º–º–∞ train_ratio, val_ratio –∏ test_ratio —Ä–∞–≤–Ω–∞ {total_ratio:.2f}, –Ω–æ—Ä–º–∞–ª–∏–∑—É—é –¥–æ 1.0")
        args.train_ratio /= total_ratio
        args.val_ratio /= total_ratio
        args.test_ratio /= total_ratio

    return args


def print_args(args):
    """–ü–µ—á–∞—Ç—å –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    print("üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞:")
    print("=" * 50)
    for arg in vars(args):
        print(f"  {arg:25} = {getattr(args, arg)}")
    print("=" * 50)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    print_args(parse_args())