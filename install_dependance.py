#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import sys
# import os
import platform
import torch


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True


def get_pytorch_install_command():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    system = platform.system().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CUDA
    if torch.cuda.is_available():
        cuda_version = torch.version.cuda
        print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CUDA {cuda_version}")
        return f"pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu{cuda_version.replace('.', '')}"
    else:
        print("‚ÑπÔ∏è  CUDA –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CPU-–≤–∞—Ä–∏–∞–Ω—Ç PyTorch")
        if system == "windows":
            return "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu"
        else:
            return "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu"


def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")

    try:
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ], check=True, capture_output=True, text=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        print(f"Stderr: {e.stderr}")
        return False


def install_torch_geometric():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Geometric —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    print("\nüß† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Geometric...")

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é PyTorch –∏ CUDA
    torch_version = torch.__version__
    cuda_available = torch.cuda.is_available()
    cuda_version = torch.version.cuda if cuda_available else None

    print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch_version}")
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {cuda_available}")
    if cuda_available:
        print(f"CUDA –≤–µ—Ä—Å–∏—è: {cuda_version}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if cuda_available and cuda_version:
        # –î–ª—è CUDA
        cuda_suffix = f"cu{cuda_version.replace('.', '')}"
        torch_geo_packages = [
            f"torch-scatter -f https://data.pyg.org/whl/torch-{torch_version}+{cuda_suffix}.html",
            f"torch-sparse -f https://data.pyg.org/whl/torch-{torch_version}+{cuda_suffix}.html",
            f"torch-cluster -f https://data.pyg.org/whl/torch-{torch_version}+{cuda_suffix}.html",
            f"torch-spline-conv -f https://data.pyg.org/whl/torch-{torch_version}+{cuda_suffix}.html",
            "torch-geometric"
        ]
    else:
        # –î–ª—è CPU
        torch_geo_packages = [
            "torch-scatter",
            "torch-sparse",
            "torch-cluster",
            "torch-spline-conv",
            "torch-geometric"
        ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã PyTorch Geometric
    for package in torch_geo_packages:
        print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", package
            ], check=True)
            print(f"‚úÖ {package.split()[0]} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
            return False

    return True


def verify_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    try:
        import torch
        import torch_geometric
        import numpy as np
        import sklearn
        import pandas as pd

        print("‚úÖ PyTorch:", torch.__version__)
        print("‚úÖ PyTorch Geometric:", torch_geometric.__version__)
        print("‚úÖ NumPy:", np.__version__)
        print("‚úÖ scikit-learn:", sklearn.__version__)
        print("‚úÖ pandas:", pd.__version__)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA
        print(f"üéØ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"üéØ CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
            print(f"üéØ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch.cuda.device_count()}")

        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –≥—Ä–∞—Ñ–∞—Ö")
    print("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if not check_python_version():
        sys.exit(1)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
        print("‚úÖ pip —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch
    print("\nüî• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch...")
    pytorch_command = get_pytorch_install_command()
    try:
        subprocess.run(pytorch_command.split(), check=True)
        print("‚úÖ PyTorch —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PyTorch: {e}")
        sys.exit(1)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch Geometric
    if not install_torch_geometric():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyTorch Geometric")
        sys.exit(1)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if verify_installation():
        print("\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        print("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  python main.py          - –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
        print("  jupyter notebook        - –∑–∞–ø—É—Å–∫ Jupyter Notebook")
        print("  python -c \"import torch_geometric; print('OK')\" - –ø—Ä–æ–≤–µ—Ä–∫–∞ PyG")
    else:
        print("\n‚ö†Ô∏è  –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)


if __name__ == "__main__":
    main()